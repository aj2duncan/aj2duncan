<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on aj2duncan.com</title>
    <link>/categories/r/</link>
    <description>Recent content in R on aj2duncan.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 29 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a Squared Grid Across Scotland</title>
      <link>/blog/creating-a-squared-grid-across-scotland/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/creating-a-squared-grid-across-scotland/</guid>
      <description>Recently I have been using the sf and tmap packages a lot and I thought I would come back to finish a draft post I started a while ago.
As part of a project a while ago, I needed to create a square grid across Scotland and produce centroids for each. We start by loading the packages we’ll need and the shapefile.
library(sf)library(tmap)scot &amp;lt;- st_read(&amp;quot;scot_shapefile/scot.shp&amp;quot;)We can see what this looks like with a quick plot.</description>
    </item>
    
    <item>
      <title>Moving Axis Labels in ggplot2</title>
      <link>/blog/moving-axis-labels-in-ggplot2/</link>
      <pubDate>Sun, 30 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/blog/moving-axis-labels-in-ggplot2/</guid>
      <description>A wee while ago I needed to tweak some plots. The plots are exported as jpegs and are always results over the last ten years. The change I needed to make was to move the default labels produced by ggplot2.
To demonstrate, let’s look at an example by reducing the economics dataset to 10 years of data and producing a quick plot.
library(tidyverse)library(lubridate)# reduce the datadata_to_plot &amp;lt;- filter(economics, between(date, as.</description>
    </item>
    
    <item>
      <title>Postcode Polygons on a Leaflet Map - Updated</title>
      <link>/blog/postcode-polygons-on-a-leaflet-map-updated/</link>
      <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/postcode-polygons-on-a-leaflet-map-updated/</guid>
      <description>Following an earlier post where I plotted postcode polygons on a Leaflet map I wanted to update it to use the sf package which is now my default package for working with spatial data. Note that I’ve also started using &amp;lt;- again after being a longtime user of =.
Sorting the DataFirst we’ll load the packages we need.
library(sf)library(leaflet)library(tidyverse)Next we read in the data.</description>
    </item>
    
    <item>
      <title>Using `dplyr::rename()` within a function</title>
      <link>/blog/using-dplyr-rename-within-a-function/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/using-dplyr-rename-within-a-function/</guid>
      <description>Today I rewrote some old code and came across something that I thought I would write down because I’m pretty sure I’ll forget it if I don’t! The issue was passing strings to the rename() function from the dplyr package to rename a column. This came about because of a change in a older1 version of dplyr which had functions specifically for use inside your own functions. These had an underscore as a postfix.</description>
    </item>
    
    <item>
      <title>Extracting Columns from a Tibble</title>
      <link>/blog/extracting-columns-from-a-tibble/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/extracting-columns-from-a-tibble/</guid>
      <description>This is both a follow up post to my earlier post tibbles, data frames and vectors and a query that came up at work.
The central question was how can you extract a column from a tibble as part of a pipe. That might sound straight forward but let’s take a look.
# load packages and create a tibble to work withlibrary(tibble)library(dplyr)test = tibble(id = c(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;a&amp;quot;), val = c(1, 2, 3))test# A tibble: 3 x 2id val&amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;1 a 12 b 23 a 3Let’s run a quick filter() and then select() the values.</description>
    </item>
    
    <item>
      <title>Hosting xaringan slides using github pages</title>
      <link>/blog/hosting-xaringan-slides-using-github-pages/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/hosting-xaringan-slides-using-github-pages/</guid>
      <description>This is a quick guide to hosting xaringan slides online using github pages.
To start with I create an RStudio project (initialising a git repository) and then slides.Rmd using the xaringan R markdown template. At this point we could modify the R markdown file but I&amp;rsquo;m going to make sure it works online first.
Having created slides.html by knitting the R markdown file, we can commit everything we&amp;rsquo;ve got.
git add .</description>
    </item>
    
    <item>
      <title>Leaflet Draw, Exporting Polygons and the Holepunch Package</title>
      <link>/blog/leaflet-draw-exporting-shapefiles-and-the-holepunch-package/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/leaflet-draw-exporting-shapefiles-and-the-holepunch-package/</guid>
      <description>A little over a month ago I attended FOSS4GUK 2019. It was a great conference and there were a few presentations (like mine) on Leaflet. One conversation I had was about using Leaflet to gather data and the question was whether it could be used draw and export polygons/polylines. I thought I would see if it could be. I have previously used a shiny app to record points submitted by users but not to record polygons.</description>
    </item>
    
    <item>
      <title>Tibbles, Data frames and Vectors</title>
      <link>/blog/tibbles-dataframes-and-vectors/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/tibbles-dataframes-and-vectors/</guid>
      <description>I learned something new today and the reason I write this is that I’m somewhat confused as to how I didn’t know it already.
Data FramesLet us start by creating a data frame.
temp = data.frame(x = c(1:3), y = c(10:12))temp x y1 1 102 2 113 3 12We can select rows
temp[1,] x y1 1 10and columns</description>
    </item>
    
    <item>
      <title>Plotting Rurality in Scotland</title>
      <link>/blog/plotting-rurality-in-scotlands/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/blog/plotting-rurality-in-scotlands/</guid>
      <description>The Scottish Government Rural Classification gives definitions of rural areas within Scotland. As someone who lives (and works) in an area classed as rural I’ve taken more interest in this more recently. I’ve also started working with mapping more in R and so decided to combine the two into a post. As part of the classification Scottish Government provide a shape file to download. We can then load it in.</description>
    </item>
    
    <item>
      <title>Postcode Polygons on a Leaflet Map</title>
      <link>/blog/postcode-polygons-on-a-leaflet-map/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/postcode-polygons-on-a-leaflet-map/</guid>
      <description>I have been using Leaflet for a little while now but always as part of a shiny app. However, as Mike Spencer went to all the trouble of producing polygons for GB postcode areas and districts I thought this was a good opportunity for a blog post (Spencer 2018).
Sorting the DataFirst we’ll load the packages we need.
library(rgdal)library(leaflet)Next we read in the data.</description>
    </item>
    
    <item>
      <title>The Value of a Minimal Reproducible Example</title>
      <link>/blog/the-value-of-a-minimal-reproducible-example/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/the-value-of-a-minimal-reproducible-example/</guid>
      <description>I’m writing this down in the hope that it will remind me in the future.
Although I have used a minimal reproducible example before, I found one particularly useful the other day.
The ProblemI had developed a shiny app and part of this was a leaflet map where users are able to click the map to add a marker, these are later captured. However, the markers always appeared below and to the right of where the point clicked.</description>
    </item>
    
    <item>
      <title>using plotly to generate interactive 3d plots</title>
      <link>/blog/using-plotly-to-generate-interactive-3d-plots/</link>
      <pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/using-plotly-to-generate-interactive-3d-plots/</guid>
      <description>One of the courses I teach is a degree module which includes an introduction to solving ordinary differential equations (ODEs) numerically using R. I make heavy use of the deSolve package and normally plot results with ggplot2 but one of the models we look at is a 2/3 body problem and we generate results in 3d. At the moment we’ve been using scatterplot3d as it’s pretty easy to use but it is kind of lacking something when it comes to helping students see what is happening.</description>
    </item>
    
    <item>
      <title>ggplot_build() again</title>
      <link>/blog/ggplot-build-again/</link>
      <pubDate>Sun, 06 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/ggplot-build-again/</guid>
      <description>I was playing around with extracting data from ggplot graphs, which I have done previously using ggplot2_build(). This time it was getting some of the modelling results that are plotted using geom_smooth(). Take the quick example below.
library(ggplot2)p = ggplot(cars, aes(x = speed, y = dist)) + geom_point() + geom_smooth(method = &amp;quot;loess&amp;quot;)pThe plot has two layers and so ggplot_build(p)$data will return a list of two data frames.</description>
    </item>
    
    <item>
      <title>sigmaNet - Interactive Network Plots</title>
      <link>/blog/sigmanet-interactive-network-plots/</link>
      <pubDate>Sat, 28 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/sigmanet-interactive-network-plots/</guid>
      <description>Since getting my PhD, my mathematics focus has been on network analysis with an emphasis on examining the network with an eye to how diseases might spread through it. I recently came across a new package for network visualisation which I liked because it was interactive without needing to build it into a shiny app. This is similar to several other packages but I liked the syntax of it and that it also seemed quite light weight.</description>
    </item>
    
    <item>
      <title>Dealing with missing data in ggplot2 barplots</title>
      <link>/blog/missing-data-ggplot2-barplots/</link>
      <pubDate>Wed, 20 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/missing-data-ggplot2-barplots/</guid>
      <description>I’m wrting this down because it’s a problem I’ve tried to deal with twice in the last couple of weeks and I had to look the solution up both times. The second time, rather than just fix it I dug a little deeper to find out why something I thought would work didn’t.
Any way, the problem:
library(ggplot2)fake_data &amp;lt;- data.frame(var1 = c(&amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;), var2 = c(&amp;quot;x&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;x&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;y&amp;quot;, &amp;quot;x&amp;quot;))fake_data  var1 var21 a x2 a x3 a y4 b x5 b y6 b y7 c xggplot(fake_data, aes(x = var1, fill = var2)) +geom_bar(position = &amp;quot;dodge&amp;quot;)Now that all works fine but I don’t want the bar for c to be full width, just half width as the others are, so the missing data (or count of zero is clearer).</description>
    </item>
    
    <item>
      <title>More info on ggplots</title>
      <link>/blog/more-info-on-ggplots/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/blog/more-info-on-ggplots/</guid>
      <description>I have been a big fan of Hadley Wickham’s ggplot package for a while. This last week I was building a shiny app and wanted to find out exactly which colours were being used in the plot. After a bit of googling I ended up at this stackoverflow post, which led me to the ggplot_build function which I found seriously useful.
A little demo:
library(ggplot2)# create a sample plotp = ggplot(mtcars, aes(x = hp, y = mpg, colour = factor(cyl), shape = factor(am))) +geom_point(size = 3) +labs(colour = &amp;quot;No.</description>
    </item>
    
  </channel>
</rss>
